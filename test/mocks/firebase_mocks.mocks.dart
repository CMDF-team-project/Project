// Mocks generated by Mockito 5.4.4 from annotations
// in team_project/test/mocks/firebase_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i13;

import 'package:firebase_database/firebase_database.dart' as _i2;
import 'package:firebase_database_platform_interface/firebase_database_platform_interface.dart'
    as _i9;
import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/scheduler.dart' as _i6;
import 'package:flutter/src/material/banner.dart' as _i12;
import 'package:flutter/src/material/scaffold.dart' as _i5;
import 'package:flutter/src/material/snack_bar.dart' as _i11;
import 'package:flutter/src/widgets/notification_listener.dart' as _i10;
import 'package:flutter/widgets.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabaseReference_0 extends _i1.SmartFake
    implements _i2.DatabaseReference {
  _FakeDatabaseReference_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionResult_1 extends _i1.SmartFake
    implements _i2.TransactionResult {
  _FakeTransactionResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeOnDisconnect_2 extends _i1.SmartFake implements _i2.OnDisconnect {
  _FakeOnDisconnect_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDataSnapshot_3 extends _i1.SmartFake implements _i2.DataSnapshot {
  _FakeDataSnapshot_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabaseEvent_4 extends _i1.SmartFake implements _i2.DatabaseEvent {
  _FakeDatabaseEvent_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_5 extends _i1.SmartFake implements _i2.Query {
  _FakeQuery_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_6 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_7 extends _i1.SmartFake
    implements _i3.InheritedWidget {
  _FakeInheritedWidget_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_8 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeScaffoldMessenger_9 extends _i1.SmartFake
    implements _i5.ScaffoldMessenger {
  _FakeScaffoldMessenger_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeBuildContext_10 extends _i1.SmartFake implements _i3.BuildContext {
  _FakeBuildContext_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeScaffoldFeatureController_11<T extends _i3.Widget, U>
    extends _i1.SmartFake implements _i5.ScaffoldFeatureController<T, U> {
  _FakeScaffoldFeatureController_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTicker_12 extends _i1.SmartFake implements _i6.Ticker {
  _FakeTicker_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

/// A class which mocks [DatabaseReference].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseReference extends _i1.Mock implements _i2.DatabaseReference {
  MockDatabaseReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseReference get root => (super.noSuchMethod(
        Invocation.getter(#root),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.getter(#root),
        ),
      ) as _i2.DatabaseReference);

  @override
  _i2.DatabaseReference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.DatabaseReference);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i8.Stream<_i2.DatabaseEvent> get onChildAdded => (super.noSuchMethod(
        Invocation.getter(#onChildAdded),
        returnValue: _i8.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i8.Stream<_i2.DatabaseEvent>);

  @override
  _i8.Stream<_i2.DatabaseEvent> get onChildRemoved => (super.noSuchMethod(
        Invocation.getter(#onChildRemoved),
        returnValue: _i8.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i8.Stream<_i2.DatabaseEvent>);

  @override
  _i8.Stream<_i2.DatabaseEvent> get onChildChanged => (super.noSuchMethod(
        Invocation.getter(#onChildChanged),
        returnValue: _i8.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i8.Stream<_i2.DatabaseEvent>);

  @override
  _i8.Stream<_i2.DatabaseEvent> get onChildMoved => (super.noSuchMethod(
        Invocation.getter(#onChildMoved),
        returnValue: _i8.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i8.Stream<_i2.DatabaseEvent>);

  @override
  _i8.Stream<_i2.DatabaseEvent> get onValue => (super.noSuchMethod(
        Invocation.getter(#onValue),
        returnValue: _i8.Stream<_i2.DatabaseEvent>.empty(),
      ) as _i8.Stream<_i2.DatabaseEvent>);

  @override
  _i2.DatabaseReference child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i2.DatabaseReference);

  @override
  _i2.DatabaseReference push() => (super.noSuchMethod(
        Invocation.method(
          #push,
          [],
        ),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.method(
            #push,
            [],
          ),
        ),
      ) as _i2.DatabaseReference);

  @override
  _i8.Future<void> set(Object? value) => (super.noSuchMethod(
        Invocation.method(
          #set,
          [value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setWithPriority(
    Object? value,
    Object? priority,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWithPriority,
          [
            value,
            priority,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> update(Map<String, Object?>? value) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> setPriority(Object? priority) => (super.noSuchMethod(
        Invocation.method(
          #setPriority,
          [priority],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<void> remove() => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i2.TransactionResult> runTransaction(
    _i9.TransactionHandler? transactionHandler, {
    bool? applyLocally = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #runTransaction,
          [transactionHandler],
          {#applyLocally: applyLocally},
        ),
        returnValue:
            _i8.Future<_i2.TransactionResult>.value(_FakeTransactionResult_1(
          this,
          Invocation.method(
            #runTransaction,
            [transactionHandler],
            {#applyLocally: applyLocally},
          ),
        )),
      ) as _i8.Future<_i2.TransactionResult>);

  @override
  _i2.OnDisconnect onDisconnect() => (super.noSuchMethod(
        Invocation.method(
          #onDisconnect,
          [],
        ),
        returnValue: _FakeOnDisconnect_2(
          this,
          Invocation.method(
            #onDisconnect,
            [],
          ),
        ),
      ) as _i2.OnDisconnect);

  @override
  _i8.Future<_i2.DataSnapshot> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i8.Future<_i2.DataSnapshot>.value(_FakeDataSnapshot_3(
          this,
          Invocation.method(
            #get,
            [],
          ),
        )),
      ) as _i8.Future<_i2.DataSnapshot>);

  @override
  _i8.Future<_i2.DatabaseEvent> once(
          [_i9.DatabaseEventType? eventType = _i9.DatabaseEventType.value]) =>
      (super.noSuchMethod(
        Invocation.method(
          #once,
          [eventType],
        ),
        returnValue: _i8.Future<_i2.DatabaseEvent>.value(_FakeDatabaseEvent_4(
          this,
          Invocation.method(
            #once,
            [eventType],
          ),
        )),
      ) as _i8.Future<_i2.DatabaseEvent>);

  @override
  _i2.Query startAt(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAt,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #startAt,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);

  @override
  _i2.Query startAfter(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startAfter,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #startAfter,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);

  @override
  _i2.Query endAt(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endAt,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #endAt,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);

  @override
  _i2.Query endBefore(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #endBefore,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #endBefore,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);

  @override
  _i2.Query equalTo(
    Object? value, {
    String? key,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #equalTo,
          [value],
          {#key: key},
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #equalTo,
            [value],
            {#key: key},
          ),
        ),
      ) as _i2.Query);

  @override
  _i2.Query limitToFirst(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToFirst,
          [limit],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #limitToFirst,
            [limit],
          ),
        ),
      ) as _i2.Query);

  @override
  _i2.Query limitToLast(int? limit) => (super.noSuchMethod(
        Invocation.method(
          #limitToLast,
          [limit],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #limitToLast,
            [limit],
          ),
        ),
      ) as _i2.Query);

  @override
  _i2.Query orderByChild(String? path) => (super.noSuchMethod(
        Invocation.method(
          #orderByChild,
          [path],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #orderByChild,
            [path],
          ),
        ),
      ) as _i2.Query);

  @override
  _i2.Query orderByKey() => (super.noSuchMethod(
        Invocation.method(
          #orderByKey,
          [],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #orderByKey,
            [],
          ),
        ),
      ) as _i2.Query);

  @override
  _i2.Query orderByValue() => (super.noSuchMethod(
        Invocation.method(
          #orderByValue,
          [],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #orderByValue,
            [],
          ),
        ),
      ) as _i2.Query);

  @override
  _i2.Query orderByPriority() => (super.noSuchMethod(
        Invocation.method(
          #orderByPriority,
          [],
        ),
        returnValue: _FakeQuery_5(
          this,
          Invocation.method(
            #orderByPriority,
            [],
          ),
        ),
      ) as _i2.Query);

  @override
  _i8.Future<void> keepSynced(bool? value) => (super.noSuchMethod(
        Invocation.method(
          #keepSynced,
          [value],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [DataSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDataSnapshot extends _i1.Mock implements _i2.DataSnapshot {
  MockDataSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DatabaseReference get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeDatabaseReference_0(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.DatabaseReference);

  @override
  bool get exists => (super.noSuchMethod(
        Invocation.getter(#exists),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i2.DataSnapshot> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: <_i2.DataSnapshot>[],
      ) as Iterable<_i2.DataSnapshot>);

  @override
  bool hasChild(String? path) => (super.noSuchMethod(
        Invocation.method(
          #hasChild,
          [path],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.DataSnapshot child(String? path) => (super.noSuchMethod(
        Invocation.method(
          #child,
          [path],
        ),
        returnValue: _FakeDataSnapshot_3(
          this,
          Invocation.method(
            #child,
            [path],
          ),
        ),
      ) as _i2.DataSnapshot);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i3.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_6(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i3.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);

  @override
  _i3.InheritedWidget dependOnInheritedElement(
    _i3.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_7(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i3.InheritedWidget);

  @override
  void visitAncestorElements(_i3.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i3.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i10.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.DiagnosticsNode describeElement(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_8(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  _i4.DiagnosticsNode describeWidget(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_8(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i4.DiagnosticsNode>[],
      ) as List<_i4.DiagnosticsNode>);

  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_8(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i4.DiagnosticsNode);
}

/// A class which mocks [ScaffoldMessengerState].
///
/// See the documentation for Mockito's code generation for more information.
class MockScaffoldMessengerState extends _i1.Mock
    implements _i5.ScaffoldMessengerState {
  MockScaffoldMessengerState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.ScaffoldMessenger get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeScaffoldMessenger_9(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i5.ScaffoldMessenger);

  @override
  _i3.BuildContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeBuildContext_10(
          this,
          Invocation.getter(#context),
        ),
      ) as _i3.BuildContext);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  void didChangeDependencies() => super.noSuchMethod(
        Invocation.method(
          #didChangeDependencies,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ScaffoldFeatureController<_i11.SnackBar, _i11.SnackBarClosedReason>
      showSnackBar(
    _i11.SnackBar? snackBar, {
    _i3.AnimationStyle? snackBarAnimationStyle,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #showSnackBar,
              [snackBar],
              {#snackBarAnimationStyle: snackBarAnimationStyle},
            ),
            returnValue: _FakeScaffoldFeatureController_11<_i11.SnackBar,
                _i11.SnackBarClosedReason>(
              this,
              Invocation.method(
                #showSnackBar,
                [snackBar],
                {#snackBarAnimationStyle: snackBarAnimationStyle},
              ),
            ),
          ) as _i5.ScaffoldFeatureController<_i11.SnackBar,
              _i11.SnackBarClosedReason>);

  @override
  void removeCurrentSnackBar(
          {_i11.SnackBarClosedReason? reason =
              _i11.SnackBarClosedReason.remove}) =>
      super.noSuchMethod(
        Invocation.method(
          #removeCurrentSnackBar,
          [],
          {#reason: reason},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void hideCurrentSnackBar(
          {_i11.SnackBarClosedReason? reason =
              _i11.SnackBarClosedReason.hide}) =>
      super.noSuchMethod(
        Invocation.method(
          #hideCurrentSnackBar,
          [],
          {#reason: reason},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearSnackBars() => super.noSuchMethod(
        Invocation.method(
          #clearSnackBars,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.ScaffoldFeatureController<_i12.MaterialBanner,
      _i12.MaterialBannerClosedReason> showMaterialBanner(
          _i12.MaterialBanner? materialBanner) =>
      (super.noSuchMethod(
        Invocation.method(
          #showMaterialBanner,
          [materialBanner],
        ),
        returnValue: _FakeScaffoldFeatureController_11<_i12.MaterialBanner,
            _i12.MaterialBannerClosedReason>(
          this,
          Invocation.method(
            #showMaterialBanner,
            [materialBanner],
          ),
        ),
      ) as _i5.ScaffoldFeatureController<_i12.MaterialBanner,
          _i12.MaterialBannerClosedReason>);

  @override
  void removeCurrentMaterialBanner(
          {_i12.MaterialBannerClosedReason? reason =
              _i12.MaterialBannerClosedReason.remove}) =>
      super.noSuchMethod(
        Invocation.method(
          #removeCurrentMaterialBanner,
          [],
          {#reason: reason},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void hideCurrentMaterialBanner(
          {_i12.MaterialBannerClosedReason? reason =
              _i12.MaterialBannerClosedReason.hide}) =>
      super.noSuchMethod(
        Invocation.method(
          #hideCurrentMaterialBanner,
          [],
          {#reason: reason},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearMaterialBanners() => super.noSuchMethod(
        Invocation.method(
          #clearMaterialBanners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Widget build(_i3.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #build,
          [context],
        ),
        returnValue: _FakeWidget_6(
          this,
          Invocation.method(
            #build,
            [context],
          ),
        ),
      ) as _i3.Widget);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void initState() => super.noSuchMethod(
        Invocation.method(
          #initState,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void didUpdateWidget(_i5.ScaffoldMessenger? oldWidget) => super.noSuchMethod(
        Invocation.method(
          #didUpdateWidget,
          [oldWidget],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reassemble() => super.noSuchMethod(
        Invocation.method(
          #reassemble,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setState(_i13.VoidCallback? fn) => super.noSuchMethod(
        Invocation.method(
          #setState,
          [fn],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void deactivate() => super.noSuchMethod(
        Invocation.method(
          #deactivate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void activate() => super.noSuchMethod(
        Invocation.method(
          #activate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void debugFillProperties(_i4.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toString({_i4.DiagnosticLevel? minLevel = _i4.DiagnosticLevel.info}) =>
      super.toString();

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i7.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  _i4.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i4.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_8(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  _i6.Ticker createTicker(_i6.TickerCallback? onTick) => (super.noSuchMethod(
        Invocation.method(
          #createTicker,
          [onTick],
        ),
        returnValue: _FakeTicker_12(
          this,
          Invocation.method(
            #createTicker,
            [onTick],
          ),
        ),
      ) as _i6.Ticker);
}
